"""
Debug script to test vulnerability detection
"""

from tools.vulnerability_analyzer_agent import VulnerabilityAnalyzerAgent

# Test with a simple vulnerable code
test_code = """
import os

def ping_host():
    host = input("Enter host: ")
    # This is clearly vulnerable to command injection
    os.system(f"ping -c 4 {host}")
    
def get_user():
    user_id = input("Enter user ID: ")
    # SQL injection vulnerability
    query = f"SELECT * FROM users WHERE id = {user_id}"
    cursor.execute(query)
"""

print("Testing Vulnerability Analyzer Agent...")
print("="*60)

analyzer = VulnerabilityAnalyzerAgent()

# Test the analyze_code method
print("\nAnalyzing test code...")
findings = analyzer.analyze_code(test_code, "python")

print(f"\nNumber of findings: {len(findings)}")

if findings:
    for i, finding in enumerate(findings, 1):
        print(f"\n{i}. {finding.vulnerability_type}")
        print(f"   Severity: {finding.severity}")
        print(f"   Description: {finding.description}")
        print(f"   Confidence: {finding.confidence}")
else:
    print("\n⚠️ No vulnerabilities found - this is unexpected!")
    
# Let's also test the raw LLM response
print("\n" + "="*60)
print("Testing raw LLM response...")

# Get the raw response from the chain
try:
    # First get context
    context = analyzer.context_chain.run(code=test_code, language="python")
    print(f"\nContext generated: {context[:200]}...")
    
    # Then get vulnerability analysis
    result = analyzer.vulnerability_chain.run(
        code=test_code,
        language="python", 
        context=context
    )
    print(f"\nRaw LLM response:")
    print(result)
except Exception as e:
    print(f"\nError occurred: {type(e).__name__}: {e}")
    import traceback
    traceback.print_exc() 