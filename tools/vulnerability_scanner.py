import re
import ast
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

class VulnerabilityType(Enum):
    SQL_INJECTION = "SQL Injection"
    XSS = "Cross-Site Scripting (XSS)"
    COMMAND_INJECTION = "Command Injection"
    PATH_TRAVERSAL = "Path Traversal"
    XXE = "XML External Entity (XXE)"
    SSRF = "Server-Side Request Forgery (SSRF)"
    INSECURE_DESERIALIZATION = "Insecure Deserialization"
    HARDCODED_SECRETS = "Hardcoded Secrets"
    WEAK_CRYPTO = "Weak Cryptography"
    RACE_CONDITION = "Race Condition"
    BUFFER_OVERFLOW = "Buffer Overflow"
    CODE_INJECTION = "Code Injection"
    LDAP_INJECTION = "LDAP Injection"
    XPATH_INJECTION = "XPath Injection"
    FILE_UPLOAD = "Unrestricted File Upload"
    OPEN_REDIRECT = "Open Redirect"
    CSRF = "Cross-Site Request Forgery (CSRF)"
    INSECURE_RANDOM = "Insecure Randomness"
    
@dataclass
class Vulnerability:
    type: VulnerabilityType
    severity: str  # CRITICAL, HIGH, MEDIUM, LOW
    file_path: str
    line_number: int
    code_snippet: str
    description: str
    recommendation: str
    confidence: float  # 0.0 to 1.0

class VulnerabilityScanner:
    """
    高级漏洞扫描器，支持多种编程语言的安全模式检测
    """
    
    def __init__(self):
        self.vulnerability_patterns = self._init_patterns()
        
    def _init_patterns(self) -> Dict[str, List[Dict]]:
        """
        初始化各种语言的漏洞模式
        """
        return {
            'python': [
                # SQL Injection patterns
                {
                    'type': VulnerabilityType.SQL_INJECTION,
                    'patterns': [
                        r'execute\s*\(\s*["\'].*%[s|d].*["\'].*%.*\)',
                        r'execute\s*\(\s*f["\'].*{.*}.*["\'].*\)',
                        r'execute\s*\(\s*["\'].*\+.*\)',
                        r'cursor\.execute\s*\(\s*.*\+.*\)',
                        r'\.format\s*\(.*\).*execute',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'SQL query constructed with string concatenation or formatting',
                    'recommendation': 'Use parameterized queries or prepared statements'
                },
                # Command Injection
                {
                    'type': VulnerabilityType.COMMAND_INJECTION,
                    'patterns': [
                        r'os\.system\s*\(',
                        r'subprocess\.(call|run|Popen)\s*\(\s*[^,\[]*\+',
                        r'subprocess\.\w+\s*\(\s*f["\']',
                        r'eval\s*\(\s*.*input.*\)',
                        r'exec\s*\(\s*.*input.*\)',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'Potential command injection vulnerability',
                    'recommendation': 'Use subprocess with list arguments and avoid shell=True'
                },
                # Path Traversal
                {
                    'type': VulnerabilityType.PATH_TRAVERSAL,
                    'patterns': [
                        r'open\s*\(\s*.*\+.*\)',
                        r'open\s*\(\s*f["\'].*{.*}.*["\']',
                        r'os\.path\.join\s*\(\s*.*,\s*request\.',
                        r'send_file\s*\(\s*.*request\.',
                    ],
                    'severity': 'HIGH',
                    'description': 'User input used in file path operations',
                    'recommendation': 'Validate and sanitize file paths, use os.path.abspath and check prefix'
                },
                # Hardcoded Secrets
                {
                    'type': VulnerabilityType.HARDCODED_SECRETS,
                    'patterns': [
                        r'(password|passwd|pwd|secret|key|token)\s*=\s*["\'][^"\']+["\']',
                        r'(api_key|apikey|auth_token|access_token)\s*=\s*["\'][^"\']+["\']',
                        r'["\'](?:sk|pk)_(?:test|live)_[a-zA-Z0-9]{24,}["\']',
                    ],
                    'severity': 'HIGH',
                    'description': 'Hardcoded credentials or secrets detected',
                    'recommendation': 'Use environment variables or secure credential storage'
                },
                # Weak Crypto
                {
                    'type': VulnerabilityType.WEAK_CRYPTO,
                    'patterns': [
                        r'hashlib\.md5\s*\(',
                        r'hashlib\.sha1\s*\(',
                        r'DES\.new\s*\(',
                        r'Random\(\)\.(?:random|randint)',
                    ],
                    'severity': 'MEDIUM',
                    'description': 'Weak cryptographic algorithm or insecure random number generation',
                    'recommendation': 'Use strong algorithms like SHA-256+ and secrets module for crypto'
                },
                # Code Injection
                {
                    'type': VulnerabilityType.CODE_INJECTION,
                    'patterns': [
                        r'eval\s*\(\s*[^"\')]+\)',
                        r'exec\s*\(\s*[^"\')]+\)',
                        r'__import__\s*\(\s*[^"\')]+\)',
                        r'compile\s*\(\s*[^"\')]+.*exec',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'Dynamic code execution with user input',
                    'recommendation': 'Avoid eval/exec with user input, use safe alternatives'
                },
                # Insecure Deserialization
                {
                    'type': VulnerabilityType.INSECURE_DESERIALIZATION,
                    'patterns': [
                        r'pickle\.loads?\s*\(\s*.*request\.',
                        r'yaml\.load\s*\(\s*.*[,\)]',
                        r'marshal\.loads?\s*\(',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'Insecure deserialization of untrusted data',
                    'recommendation': 'Use safe deserialization methods or JSON instead'
                },
                # SSRF
                {
                    'type': VulnerabilityType.SSRF,
                    'patterns': [
                        r'requests\.(get|post|put|delete)\s*\(\s*.*request\.',
                        r'urllib.*urlopen\s*\(\s*.*request\.',
                        r'http\.client\.HTTPConnection\s*\(\s*.*request\.',
                    ],
                    'severity': 'HIGH',
                    'description': 'User-controlled URL in network request',
                    'recommendation': 'Validate URLs against allowlist and implement proper access controls'
                },
            ],
            'javascript': [
                # XSS patterns
                {
                    'type': VulnerabilityType.XSS,
                    'patterns': [
                        r'innerHTML\s*=.*\+',
                        r'innerHTML\s*=.*\$\{',
                        r'document\.write\s*\(',
                        r'\.html\s*\(\s*[^"\')]+\)',
                        r'v-html\s*=\s*["\'][^"\']*\$',
                    ],
                    'severity': 'HIGH',
                    'description': 'Potential XSS vulnerability through unsafe DOM manipulation',
                    'recommendation': 'Use textContent or proper sanitization libraries'
                },
                # SQL Injection
                {
                    'type': VulnerabilityType.SQL_INJECTION,
                    'patterns': [
                        r'query\s*\(\s*["\'].*\+.*["\']',
                        r'query\s*\(\s*`.*\$\{.*\}`',
                        r'execute\s*\(\s*["\'].*\+.*["\']',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'SQL query with string concatenation',
                    'recommendation': 'Use parameterized queries'
                },
                # Command Injection
                {
                    'type': VulnerabilityType.COMMAND_INJECTION,
                    'patterns': [
                        r'exec\s*\(\s*[^"\')]+\)',
                        r'execSync\s*\(\s*[^"\')]+\)',
                        r'spawn\s*\(\s*[^,\[]*\+',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'Command execution with user input',
                    'recommendation': 'Use execFile with arguments array'
                },
                # Insecure Random
                {
                    'type': VulnerabilityType.INSECURE_RANDOM,
                    'patterns': [
                        r'Math\.random\s*\(\s*\).*(?:password|token|key|secret)',
                    ],
                    'severity': 'MEDIUM',
                    'description': 'Math.random used for security-sensitive operations',
                    'recommendation': 'Use crypto.randomBytes() for cryptographic operations'
                },
            ],
            'java': [
                # SQL Injection
                {
                    'type': VulnerabilityType.SQL_INJECTION,
                    'patterns': [
                        r'Statement.*execute.*\+',
                        r'createStatement\(\).*execute',
                        r'String\s+sql\s*=.*\+.*request\.',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'SQL injection through string concatenation',
                    'recommendation': 'Use PreparedStatement with parameterized queries'
                },
                # XXE
                {
                    'type': VulnerabilityType.XXE,
                    'patterns': [
                        r'DocumentBuilderFactory\.newInstance\(\)',
                        r'SAXParserFactory\.newInstance\(\)',
                        r'XMLReaderFactory\.createXMLReader\(\)',
                    ],
                    'severity': 'HIGH',
                    'description': 'XML parser without XXE protection',
                    'recommendation': 'Disable external entities and DTD processing'
                },
                # Path Traversal
                {
                    'type': VulnerabilityType.PATH_TRAVERSAL,
                    'patterns': [
                        r'new\s+File\s*\(\s*.*request\.',
                        r'Paths\.get\s*\(\s*.*request\.',
                        r'FileInputStream\s*\(\s*.*\+',
                    ],
                    'severity': 'HIGH',
                    'description': 'User input in file path',
                    'recommendation': 'Validate paths and use canonical path checking'
                },
            ],
            'php': [
                # SQL Injection
                {
                    'type': VulnerabilityType.SQL_INJECTION,
                    'patterns': [
                        r'mysql_query\s*\(\s*["\'].*\.\s*\$_(?:GET|POST|REQUEST)',
                        r'mysqli_query\s*\(\s*\$\w+,\s*["\'].*\.\s*\$',
                        r'\$pdo->(?:query|exec)\s*\(\s*["\'].*\.\s*\$',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'SQL injection vulnerability',
                    'recommendation': 'Use prepared statements with PDO or mysqli'
                },
                # XSS
                {
                    'type': VulnerabilityType.XSS,
                    'patterns': [
                        r'echo\s+\$_(?:GET|POST|REQUEST)',
                        r'print\s+\$_(?:GET|POST|REQUEST)',
                        r'<\?=\s*\$_(?:GET|POST|REQUEST)',
                    ],
                    'severity': 'HIGH',
                    'description': 'Direct output of user input (XSS)',
                    'recommendation': 'Use htmlspecialchars() or htmlentities()'
                },
                # Command Injection
                {
                    'type': VulnerabilityType.COMMAND_INJECTION,
                    'patterns': [
                        r'(?:system|exec|shell_exec|passthru)\s*\(\s*["\'].*\.\s*\$',
                        r'`.*\$_(?:GET|POST|REQUEST).*`',
                    ],
                    'severity': 'CRITICAL',
                    'description': 'Command injection vulnerability',
                    'recommendation': 'Use escapeshellarg() and escapeshellcmd()'
                },
            ]
        }
    
    def scan_code(self, code: str, language: str, file_path: str = "") -> List[Vulnerability]:
        """
        扫描代码查找漏洞
        """
        vulnerabilities = []
        
        if language not in self.vulnerability_patterns:
            return vulnerabilities
        
        patterns = self.vulnerability_patterns[language]
        lines = code.split('\n')
        
        for pattern_info in patterns:
            for pattern in pattern_info['patterns']:
                for line_num, line in enumerate(lines, 1):
                    if re.search(pattern, line, re.IGNORECASE):
                        # 获取代码上下文
                        start = max(0, line_num - 3)
                        end = min(len(lines), line_num + 2)
                        snippet = '\n'.join(f"{i+start}: {lines[i+start-1]}" 
                                          for i in range(end - start))
                        
                        vuln = Vulnerability(
                            type=pattern_info['type'],
                            severity=pattern_info['severity'],
                            file_path=file_path,
                            line_number=line_num,
                            code_snippet=snippet,
                            description=pattern_info['description'],
                            recommendation=pattern_info['recommendation'],
                            confidence=0.8  # 基础模式匹配的置信度
                        )
                        vulnerabilities.append(vuln)
        
        # Python 特定的 AST 分析
        if language == 'python':
            vulnerabilities.extend(self._python_ast_analysis(code, file_path))
        
        return vulnerabilities
    
    def _python_ast_analysis(self, code: str, file_path: str) -> List[Vulnerability]:
        """
        使用 AST 进行更深入的 Python 代码分析
        """
        vulnerabilities = []
        
        try:
            tree = ast.parse(code)
            
            # 分析不安全的函数调用
            for node in ast.walk(tree):
                if isinstance(node, ast.Call):
                    # 检查 eval/exec
                    if isinstance(node.func, ast.Name):
                        if node.func.id in ['eval', 'exec', '__import__']:
                            if node.args and self._contains_user_input(node.args[0]):
                                vuln = Vulnerability(
                                    type=VulnerabilityType.CODE_INJECTION,
                                    severity='CRITICAL',
                                    file_path=file_path,
                                    line_number=node.lineno,
                                    code_snippet=ast.get_source_segment(code, node) or "",
                                    description=f'Dangerous {node.func.id}() with potential user input',
                                    recommendation='Avoid dynamic code execution with user input',
                                    confidence=0.9
                                )
                                vulnerabilities.append(vuln)
                    
                    # 检查 subprocess
                    elif isinstance(node.func, ast.Attribute):
                        if (hasattr(node.func.value, 'id') and 
                            node.func.value.id == 'subprocess' and 
                            node.func.attr in ['call', 'run', 'Popen']):
                            # 检查 shell=True
                            for keyword in node.keywords:
                                if keyword.arg == 'shell' and isinstance(keyword.value, ast.Constant) and keyword.value.value:
                                    vuln = Vulnerability(
                                        type=VulnerabilityType.COMMAND_INJECTION,
                                        severity='HIGH',
                                        file_path=file_path,
                                        line_number=node.lineno,
                                        code_snippet=ast.get_source_segment(code, node) or "",
                                        description='subprocess with shell=True is dangerous',
                                        recommendation='Use shell=False and pass arguments as list',
                                        confidence=0.95
                                    )
                                    vulnerabilities.append(vuln)
        
        except SyntaxError:
            pass
        
        return vulnerabilities
    
    def _contains_user_input(self, node: ast.AST) -> bool:
        """
        检查 AST 节点是否可能包含用户输入
        """
        if isinstance(node, ast.Call):
            if isinstance(node.func, ast.Name) and node.func.id in ['input', 'raw_input']:
                return True
            if isinstance(node.func, ast.Attribute):
                # 检查 request.* 等
                if hasattr(node.func.value, 'id') and node.func.value.id in ['request', 'req']:
                    return True
        
        # 递归检查子节点
        for child in ast.iter_child_nodes(node):
            if self._contains_user_input(child):
                return True
        
        return False
    
    def generate_report(self, vulnerabilities: List[Vulnerability]) -> str:
        """
        生成漏洞报告
        """
        if not vulnerabilities:
            return "✅ No vulnerabilities detected!"
        
        report = f"🔍 Security Scan Report\n"
        report += f"{'='*60}\n"
        report += f"Total vulnerabilities found: {len(vulnerabilities)}\n\n"
        
        # 按严重程度分组
        by_severity = {}
        for vuln in vulnerabilities:
            if vuln.severity not in by_severity:
                by_severity[vuln.severity] = []
            by_severity[vuln.severity].append(vuln)
        
        # 统计
        for severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:
            if severity in by_severity:
                report += f"{severity}: {len(by_severity[severity])} issues\n"
        
        report += f"\n{'='*60}\n\n"
        
        # 详细信息
        for severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:
            if severity in by_severity:
                report += f"\n{severity} SEVERITY ISSUES:\n"
                report += f"{'-'*40}\n"
                
                for i, vuln in enumerate(by_severity[severity], 1):
                    report += f"\n{i}. {vuln.type.value}\n"
                    report += f"   File: {vuln.file_path}:{vuln.line_number}\n"
                    report += f"   Description: {vuln.description}\n"
                    report += f"   Recommendation: {vuln.recommendation}\n"
                    report += f"   Confidence: {vuln.confidence:.0%}\n"
                    report += f"   Code:\n"
                    for line in vuln.code_snippet.split('\n'):
                        report += f"     {line}\n"
        
        return report 